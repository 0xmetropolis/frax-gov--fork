6,9c6,11
< import {ECDSA} from "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
< import {Governor} from "@openzeppelin/contracts/governance/Governor.sol";
< import {GovernorCompatibilityBravo} from "@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol";
< import {SafeCast} from "@openzeppelin/contracts/utils/math/SafeCast.sol";
---
> import { ECDSA } from "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
> import { Governor } from "./Governor.sol";
> import {
>     GovernorCompatibilityBravo
> } from "@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol";
> import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
23d24
<
77,86c78,80
<     function proposalVotes(uint256 proposalId)
<     public
<     view
<     virtual
<     returns (
<         uint256 againstVotes,
<         uint256 forVotes,
<         uint256 abstainVotes
<     )
<     {
---
>     function proposalVotes(
>         uint256 proposalId
>     ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {
157,162c151
<     function _countVoteNominal(
<         uint256 proposalId,
<         address account,
<         uint128 totalWeight,
<         uint8 support
<     ) internal {
---
>     function _countVoteNominal(uint256 proposalId, address account, uint128 totalWeight, uint8 support) internal {
231c220
<     uint256 constant internal _MASK_HALF_WORD_RIGHT = 0xffffffffffffffffffffffffffffffff; // 128 bits of 0's, 128 bits of 1's
---
>     uint256 internal constant _MASK_HALF_WORD_RIGHT = 0xffffffffffffffffffffffffffffffff; // 128 bits of 0's, 128 bits of 1's
238,246c227,229
<     function _decodePackedVotes(bytes memory voteData)
<     internal
<     pure
<     returns (
<         uint128 againstVotes,
<         uint128 forVotes,
<         uint128 abstainVotes
<     )
<     {
---
>     function _decodePackedVotes(
>         bytes memory voteData
>     ) internal pure returns (uint128 againstVotes, uint128 forVotes, uint128 abstainVotes) {
314,324c297,308
<                 // Perform bitwise AND operation on the data in the second word of
<                 // `params` with a mask of 128 zeros followed by 128 ones, i.e. take
<                 // the last 128 bits of `params`.
<                 _MASK_HALF_WORD_RIGHT,
<                 // Load the data from memory at the returned address.
<                 mload(
<                 // Skip the first 64 bytes (0x40):
<                 //   32 bytes encoding the length of the bytes array.
<                 //   32 bytes for the first word in the params
<                 // Return the memory address for the last word in params.
<                 add(params, 0x40)
---
>                     // Perform bitwise AND operation on the data in the second word of
>                     // `params` with a mask of 128 zeros followed by 128 ones, i.e. take
>                     // the last 128 bits of `params`.
>                     _MASK_HALF_WORD_RIGHT,
>                     // Load the data from memory at the returned address.
>                     mload(
>                         // Skip the first 64 bytes (0x40):
>                         //   32 bytes encoding the length of the bytes array.
>                         //   32 bytes for the first word in the params
>                         // Return the memory address for the last word in params.
>                         add(params, 0x40)
>                     )
326d309
<                 )
329,332c312
<             require(
<                 fractionalVoteNonce[voter] == nonce,
<                 "GovernorCountingFractional: signature has already been used"
<             );
---
>             require(fractionalVoteNonce[voter] == nonce, "GovernorCountingFractional: signature has already been used");
345d324
<